<?php class Node{public $type;public $content;public $params;public $dependents;public function __construct($type,$content=[],$params=[],$depedents=[]){$this->type=$type;$this->content=$content;$this->params=$params;$this->dependents=$depedents;}}class NodeDebugger{public static function dump($node,array $opts=[]){echo self::renderText($node,$opts);}public static function toHtml($node,array $opts=[]){$out=self::renderText($node,$opts);echo '<pre style="background:#f7f7f7;padding:12px;border-radius:6px;overflow:auto;">'.htmlspecialchars($out,ENT_QUOTES|ENT_SUBSTITUTE,'UTF-8').'</pre>';}public static function renderText($node,array $opts=[]):string{$maxDepth=$opts['maxDepth']?? 20;$trimText=$opts['trimText']?? 160;$showEmpty=$opts['showEmpty']?? false;$visited=[];return self::renderNode($node,'',true,0,$maxDepth,$trimText,$showEmpty,$visited);}private static function renderNode($node,string $prefix,bool $isLast,int $depth,int $maxDepth,int $trimText,bool $showEmpty,array&$visited):string{$line='';$branch=$depth===0?'':($isLast?'└─ ':'├─ ');$line.=$prefix.$branch;if(!is_object($node)||!method_exists($node,'type')&&!property_exists($node,'type')&&!isset($node->type)){$line.="[non-Node or invalid] ".gettype($node).PHP_EOL;return $line;}$id=is_object($node)?spl_object_hash($node):md5(serialize($node));if(isset($visited[$id])){$line.="{$node->type} (ALREADY VISITED) [id={$id}]".PHP_EOL;return $line;}$visited[$id]=true;$params=!empty($node->params)?json_encode($node->params,JSON_UNESCAPED_UNICODE):'';$line.="Node(type={$node->type}".($params!==''?" params={$params}":"").")";$line.=PHP_EOL;if($depth>=$maxDepth){$line.=$prefix.($isLast?'    ':'│   ')."... max depth reached ...".PHP_EOL;return $line;}$children=$node->content;if(is_string($children)&&trim($children)!==''){$txt=trim($children);if(mb_strlen($txt)>$trimText)$txt=mb_substr($txt,0,$trimText).'…';$line.=$prefix.($isLast?'    ':'│   ')."content (text): ".self::reprText($txt).PHP_EOL;}elseif(is_array($children)&&count($children)>0){$line.=$prefix.($isLast?'    ':'│   ')."content:".PHP_EOL;$count=count($children);$i=0;foreach($children as $k=>$child){$i++;$childIsLast=($i===$count)&&(empty($node->dependents));$subPrefix=$prefix.($isLast?'    ':'│   ');$label=is_int($k)?"#{$k}":(string)$k;if($child instanceof Node){$line.=$subPrefix.($childIsLast?'└─ ':'├─ ')."[$label] ";$line.=self::renderNode($child,$subPrefix,$childIsLast,$depth+1,$maxDepth,$trimText,$showEmpty,$visited);}else{$val=is_scalar($child)?(string)$child:gettype($child);if(mb_strlen($val)>$trimText)$val=mb_substr($val,0,$trimText).'…';$line.=$subPrefix.($childIsLast?'└─ ':'├─ ')."[$label] ".self::reprText($val).PHP_EOL;}}}else{if($showEmpty)$line.=$prefix.($isLast?'    ':'│   ')."content: (empty)".PHP_EOL;}if(!empty($node->dependents)&&is_array($node->dependents)){$line.=$prefix.($isLast?'    ':'│   ')."dependents:".PHP_EOL;$count=count($node->dependents);$i=0;foreach($node->dependents as $dep){$i++;$depIsLast=($i===$count);$subPrefix=$prefix.($isLast?'    ':'│   ');if($dep instanceof Node){$line.=self::renderNode($dep,$subPrefix,$depIsLast,$depth+1,$maxDepth,$trimText,$showEmpty,$visited);}else{$line.=$subPrefix.($depIsLast?'└─ ':'├─ ').self::reprText((string)$dep).PHP_EOL;}}}return $line;}private static function reprText(string $s):string{$s2=str_replace(["\r\n","\n","\r","\t"],['\n','\n','\n','\t'],$s);return '"'.$s2.'"';}}if(!function_exists("replaceVar")){function replaceVar($block,$global,$local=[]){return preg_replace_callback('/\{\s*
      (?P<var>[a-zA-Z_]\w*  (?:\.[a-zA-Z_0-9]\w*)*)
        (?:\s*\|\s*
            (?P<filter>.*?) # {var| f1}
        )?
      \s*\}/xs',function($m)use($global,$local){$var=$m["var"];$filter=$m["filter"]?? null;$data=$global ?? '';$return='';$path=explode(".",$var);$first=array_shift($path);if(is_array($local))$data=(array_key_exists($first,$local))?$local[$first]:($global[$first]?? '');$index=$data;foreach($path as $i){if(is_array($index)&&array_key_exists($i,$index)){$index=$index[$i];}else if($index instanceof ArrayAccess&&$index->offsetExists($i)){$index=$index[$i];}else if(is_object($index)&&(property_exists($index,$i)||isset($index->$i))){$index=$index->$i;}else{$index=null;break;}}$return=(isset($index))?$index:'';$return=processFilter($return,$filter,$global,$local);return $return;},$block);}}if(!function_exists("processFilter")){function processFilter(string $str,string|null $filter,array|object $global,array|object $local=[]):string{if(isset($filter)&&!empty($filter)){if(preg_match('/^(?P<command>\w+)\((?P<params>.*?)\)$/',$filter,$m)){$command=(isset($m['command']))?trim($m['command']):'';$params=(isset($m['params']))?trim($m['params']):'';$params=split_args(",",$params);foreach($params as $key=>$value){$params[$key]=resolveValue($value,$global,$local);}$str=resolveValue($str,$global,$local);switch($command){case 'date':$time=strtotime($str);$format=$params[0]?? '';$str=trim(date($format,$time),"'\"");$str=htmlspecialchars((string)$str,ENT_QUOTES,'UTF-8');break;case 'number_format':$number=(is_numeric($str))?(float)$str:0;$decimals=(isset($params[0])&&$params[0]!='')?(int)$params[0]:2;$decimal_separator=(isset($params[1]))?(string)$params[1]:".";$thousands_separator=(isset($params[2]))?(string)$params[2]:",";$str=number_format($number,$decimals,$decimal_separator,$thousands_separator);$str=htmlspecialchars((string)$str,ENT_QUOTES,'UTF-8');break;case 'replace':$search=(isset($params[0])&&$params[0]!='')?$params[0]:'';$replace=(isset($params[1]))?(string)$params[1]:'';$count=(isset($params[2])&&$params[2]!='')?(bool)$params[2]:false;if($count||$count=="true"){str_replace($search,$replace,$str,$count);$str=$count;$str=htmlspecialchars((string)$str,ENT_QUOTES,'UTF-8');break;}$str=str_replace($search,$replace,$str,$count);$str=htmlspecialchars((string)$str,ENT_QUOTES,'UTF-8');break;case 'round':$precision=(isset($params[0])&&$params[0]!='')?(float)$params[0]:1;$mode=(isset($params[1])&&$params[1]!='')?$params[1]:0;if(is_string($mode)){switch($mode){case "ROUND_HALF_UP":$mode=PHP_ROUND_HALF_UP;break;case "ROUND_HALF_DOWN":$mode=PHP_ROUND_HALF_DOWN;break;case "ROUND_HALF_EVEN":$mode=PHP_ROUND_HALF_EVEN;break;case "ROUND_HALF_ODD":$mode=PHP_ROUND_HALF_ODD;break;default:$mode=0;}}$str=round((float)$str,$precision,$mode);$str=htmlspecialchars((string)$str,ENT_QUOTES,'UTF-8');break;case 'truncate':$limit=(isset($params[0])&&$params[0]!='')?(int)$params[0]:10;$suffix=(isset($params[1])&&$params[1]!='')?(string)$params[1]:'...';$str=str_truncate($str,$limit,$suffix);$str=htmlspecialchars((string)$str,ENT_QUOTES,'UTF-8');break;case 'default':$default=(isset($params[0])&&$params[0]!='')?(string)$params[0]:'';$str=($str!=='')?$str:$default;$str=htmlspecialchars((string)$str,ENT_QUOTES,'UTF-8');break;}}else{switch($filter){case "strip_tags":$str=strip_tags($str);break;case "trim":$str=trim($str);break;case "nl2br":$str=nl2br($str);break;case "upper":$str=strtoupper($str);break;case "lower":$str=strtolower($str);break;case "capitalize":$str=ucwords($str);break;case "ufirst":$str=ucfirst($str);break;case "length":$str=strlen($str);break;default:break;}}}return htmlspecialchars((string)$str,ENT_QUOTES,'UTF-8');}}if(!function_exists("split_args")){function split_args(string $separator,string $str,string $starts="([{",string $ends=")]}"):array{$str=trim($str);$result=[];$buffer='';$depth=0;$inQuotes=false;$quoteChar=null;$len=strlen($str);for($i=0;$i<$len;$i++){$ch=$str[$i];if(($ch==='"'||$ch==="'")&&($i===0||$str[$i-1]!=='\\')){if($inQuotes&&$ch===$quoteChar){$inQuotes=false;$quoteChar=null;}elseif(!$inQuotes){$inQuotes=true;$quoteChar=$ch;}}if(!$inQuotes){if(str_contains($starts,$ch)){$depth++;}elseif(str_contains($ends,$ch)){$depth--;}}if($ch===$separator&&$depth===0&&!$inQuotes){$result[]=trim($buffer);$buffer='';}else{$buffer.=$ch;}}if(strlen(trim($buffer))>0){$result[]=trim($buffer);}return $result;}}if(!function_exists("str_truncate")){function str_truncate(string $str,int $limit,string $suffix="..."):string{$len=strlen($str);if($len>$limit){$prefix=substr($str,0,$limit);return $prefix.$suffix;}return $str;}}if(!function_exists("resolveValue")){function resolveValue(string $str,array|object $global,array|object $local=[]):mixed{if(isset($str)&&$str!==''){if(preg_match('/^([\'"])(.*)\1$/s',$str,$m)){$str=stripcslashes($m[2]);}else if(preg_match('/^\[.*\]$/s',$str,$m)){$array=split_args(",",trim_once($m[0],"[","]"));foreach($array as $key=>$value){$array[$key]=resolveValue($value,$global,$local);}$str=$array;}else if(preg_match('/^-?\d+(\.\d+)?$/',$str)){$str=(float) $str;}else if(in_array(strtolower($str),["true","false","null"])){$map=['true'=>true,'false'=>false,'null'=>null];$str=$map[strtolower($str)];}else{$str=replaceVar('{'.$str.'}',$global,$local);}}return $str;}}if(!function_exists("showException")){function showException(string $message):void{$env=$_ENV['APP_ENV']?:'production';if($env==='development'){ini_set('display_errors',1);try{throw new Exception($message);}catch(Exception $e){$errorpath=$e->getFile()." ".$e->getLine()."<br>".$e->getTraceAsString();echo "Exception: ".$e->getMessage()."<br>"."<strong>{$errorpath}</strong>";}}else{ini_set('display_errors',0);try{throw new Exception($message);}catch(Exception $e){echo "Um erro ocorreu. Tente novamente mais tarde <br>";}}}}if(!function_exists("trim_once")){function trim_once(string $str,string $start,string $end=''):string{$end=(isset($end)&&!empty($end)?$end:$start);$strStart=substr($str,0,1);$strEnd=substr($str,-1);if($strStart===$start&&$strEnd===$end){$str=substr($str,1,-1);}return $str;}}if(!function_exists("resolvePath")){function resolvePath(string $path,array|object $context):array|object|bool{$parts=explode(".",$path);foreach($parts as $part){if(is_array($context)&&array_key_exists($part,$context)){$context=$context[$part];}elseif(is_object($context)&&property_exists($context,$part)){$context=$context->$part;}else{return false;}}return $context;}}class TemplateParser{private $html;private $global;public $root;public function __construct(string $string,array|object $global){$this->html=$string;$this->global=$global;$this->root=$this->parse($string);}private function parse(string $html){$html=preg_replace('/<!--.*?-->/s','',$html);$stack=[];$current=new Node('root',[]);$stack[]=$current;$pattern='/
     (?P<foreach> \[\s*foreach\s* (?P<listname>[a-zA-Z_]\w*(?:\.[a-zA-Z_0-9]\w*)*) \s+as\s* (?:(?P<key>\w+)\s*=>\s*)? (?P<item>\w+) \s*{)
    | (?P<for>\[\s*for\s*(?P<times>\d+|[a-zA-Z_]\w*(?:\.[a-zA-Z_0-9]\w*)*)\s*{)
    | (?P<if>\[\s*if\s*(?P<if_condition>.*?)\s*{)
    | (?P<elseif>\[\s*else\s*if\s*(?P<elseif_condition>.*?)\s*{)
    | (?P<else>\[\s*else\s*{)
    | (?P<require>\[\s*require\s*\(?\s*
        (?P<archive>
            "(?:\\\\.|[^"\\\\])*"      # aspas duplas
          | \'(?:\\\\.|[^\'\\\\])*\'   # aspas simples
          | [a-zA-Z_]\w*(?:\.[a-zA-Z_0-9]\w*)*  # sem aspas
        )
    \s*\)?\])
    | (?P<str_filter> \[\s*str_filter\s*\(\s*(?P<str>.*?)\s*,\s*(?P<filters>.*?)\s*\)\s*])
    | (?P<close>}\s*\])
    /six';$pos=0;preg_match_all($pattern,$html,$matches,PREG_OFFSET_CAPTURE|PREG_SET_ORDER);$matches=$matches ??[];foreach($matches as $m){$start=$m[0][1];$top=end($stack);$prevIf=[];if(is_array($top->content)&&count($top->content)>0){for($i=count($top->content)-1;$i>=0;$i--){$candidate=$top->content[$i];if($candidate instanceof Node&&($candidate->type==='if'||$candidate->type==='elseif')){$prevIf=$candidate;break;}if($candidate instanceof Node&&$candidate->type==='text'){if(trim((string)$candidate->content)===''){continue;}else{break;}}}}if($start>$pos){$text=substr($html,$pos,$start-$pos);$stack[count($stack)-1]->content[]=new Node('text',$text);}if(isset($m['foreach'][0])&&$m['foreach'][0]!==''){$node=new Node('foreach',[]);$node->params['listname']=$m['listname'][0]?? null;$node->params['key']=$m['key'][0]?? null;$node->params['item']=$m['item'][0]?? null;$stack[count($stack)-1]->content[]=$node;$stack[]=$node;}elseif(isset($m['for'][0])&&$m['for'][0]!==''){$node=new Node('for',[]);$node->params['times']=isset($m['times'][0])?$m['times'][0]:0;$stack[count($stack)-1]->content[]=$node;$stack[]=$node;}elseif(isset($m['if'][0])&&$m['if'][0]!==''){$node=new Node('if',[]);$node->params['condition']=isset($m['if_condition'][0])?(string)$m['if_condition'][0]:'';if($node->params['condition']!==''){$parser=new ConditionParser($node->params['condition']);$node->params['condNode']=$parser->root;}$stack[count($stack)-1]->content[]=$node;$stack[]=$node;}elseif((isset($m['elseif'][0])&&$m['elseif'][0]!=='')||(isset($m['else'][0])&&$m['else'][0]!=='')){if($prevIf instanceof Node&&($prevIf->type==='if'||$prevIf->type==='elseif')){if(isset($m['elseif'][0])&&$m['elseif'][0]!==''){$node=new Node('elseif',[]);$node->params['condition']=isset($m['elseif_condition'][0])?(string)$m['elseif_condition'][0]:'';if($node->params['condition']!==''){$parser=new ConditionParser($node->params['condition']);$node->params['condNode']=$parser->root;}$prevIf->dependents[]=$node;$stack[]=$node;}elseif(isset($m['else'][0])&&$m['else'][0]!==''){$node=new Node('else',[]);$prevIf->dependents[]=$node;$stack[]=$node;}}else{if(isset($m['elseif'][0])&&$m['elseif'][0]!==''){$node=new Node('elseif',[]);$node->params['condition']=isset($m['elseif_condition'][0])?(string)$m['elseif_condition'][0]:'';$stack[count($stack)-1]->content[]=$node;$stack[]=$node;}elseif(isset($m['else'][0])&&$m['else'][0]!==''){$node=new Node('else',[]);$stack[count($stack)-1]->content[]=$node;$stack[]=$node;}}}elseif(isset($m['require'][0])&&$m['require'][0]!==''){$node=new Node('require',[]);$this->requireParser($node,$m['archive'][0]);$stack[count($stack)-1]->content[]=$node;}elseif(isset($m['str_filter'][0])&&$m['str_filter'][0]!==''){$node=new Node('str_filter',[]);$str=isset($m['str'][0])?(string)$m['str'][0]:'';$node->params["str"]=$str;$filters=isset($m['filters'][0])?(string)$m['filters'][0]:[];$filters=trim_once($filters,"(",")");$filters=split_args(",",$filters);$node->params["filters"]=$filters;$stack[count($stack)-1]->content[]=$node;}elseif(isset($m['close'][0])&&$m['close'][0]!==''){if($top instanceof Node&&$top->type!=='root'){array_pop($stack);}else{$node=new Node('text',$m[0][0]);$stack[count($stack)-1]->content[]=$node;}}$pos=$start+strlen($m[0][0]?? '');}if($pos<strlen($html)){$stack[count($stack)-1]->content[]=new Node('text',substr($html,$pos));}return $current;}private function requireParser(Node $node,String $Filename,array $local=[]):void{$content='';$name=$Filename?(string)$Filename:'';$name=resolveValue($name,$this->global,$local);$node->params['archive']=$name;if(file_exists($name)){$content=file_get_contents($name)?? '';}else{showException("Arquivo: ".$node->params['archive']." não encontrado");}$node->content[]=$this->parse($content);}}class ConditionParser{private $cond;public $root;public function __construct(string $string){$this->cond=$string;$tokens=$this->tokenizer($string);$this->root=$this->parseCondition($tokens);}private function parseCondition(array $tokens){$root=new Node("root",[]);while(count($tokens)>0){$tok=array_shift($tokens);if($tok==='('){$root->content[]=$this->parseCondition($tokens);continue;}if($tok===')'){break;}if($tok==='&&'||$tok==='||'){$root->content[]=$tok;continue;}if($tok==='!'){$next=array_shift($tokens);if(!$next)showException("NOT sem expressão");if($next==='('){$expr=$this->parseCondition($tokens);}elseif($next instanceof Node){$expr=$next;}else{showException("NOT sem expressão válida perto de: ".json_encode($next));}$node=new Node('not',[],['expr'=>$expr]);$root->content[]=$node;continue;}if($tok instanceof Node){$root->content[]=$tok;continue;}}while(($idx=array_search('&&',$root->content,true))!==false){$left=$root->content[$idx-1]?? null;$right=$root->content[$idx+1]?? null;$new=new Node('and');$new->params['left']=$left;$new->params['right']=$right;$root->content[$idx-1]=$new;array_splice($root->content,$idx,2);}while(($idx=array_search('||',$root->content,true))!==false){$left=$root->content[$idx-1]?? null;$right=$root->content[$idx+1]?? null;$new=new Node('or');$new->params['left']=$left;$new->params['right']=$right;$root->content[$idx-1]=$new;array_splice($root->content,$idx,2);}while(($idx=array_search('!',$root->content,true))!==false){$right=$root->content[$idx+1]?? null;$new=new Node('not');$new->params['expr']=$right;$root->content[$idx]=$new;array_splice($root->content,$idx+1,1);}if(empty($root->content)){return new Node('literal',[],['value'=>false]);}if(!isset($root->content[0])||$root->content[0]===null){return new Node('literal',[],['value'=>false]);}return $root->content[0];}private function tokenizer(string $condition){$condition=preg_replace('/^\x{FEFF}+/u','',$condition);$condition=str_replace("\xC2\xA0",' ',$condition);$len=strlen($condition);$i=0;$out=[];$cmpRegex='/^
            (
                [A-Za-z_]\w*(?:\.[A-Za-z_0-9]\w*)*   # variável
                | \'(?:\\\\\'|[^\'])*\'             # string simples
                | "(?:\\\\\"|[^"])*"                # string dupla
                | \d+(?:\.\d+)?                     # número
            )
            \s*(==|=|!=|===|!==|>=|<=|>|<|\(|\))\s*
            (
                [A-Za-z_]\w*(?:\.[A-Za-z_0-9]\w*)*
                | \'(?:\\\\\'|[^\'])*\'
                | "(?:\\\\\"|[^"])*"
                | \d+(?:\.\d+)?
            )
        /x';while($i<$len){if(preg_match('/^\s+/A',substr($condition,$i),$m)){$i+=strlen($m[0]);continue;}$rest=substr($condition,$i);if($rest[0]==='('){$out[]='(';$i++;continue;}if($rest[0]===')'){$out[]=')';$i++;continue;}if(substr($rest,0,2)==='&&'){$out[]='&&';$i+=2;continue;}else if(substr($rest,0,2)==='||'){$out[]='||';$i+=2;continue;}else if($rest[0]==='!'){$out[]='!';$i++;continue;}if(preg_match($cmpRegex,$rest,$mm)){$node=new Node('comparison',[]);$node->params['left']=$mm[1];$node->params['op']=$mm[2];$node->params['right']=$mm[3];$out[]=$node;$i+=strlen($mm[0]);continue;}if(preg_match('/^[A-Za-z_]\w*(?:\.[A-Za-z_0-9]\w*)*/A',$rest,$m)){$lit=$m[0];$node=new Node('literal',[],['expr'=>$lit]);$out[]=$node;$i+=strlen($lit);continue;}if(preg_match('/^\'(?:\\\\\'|[^\'])*\'/A',$rest,$m)||preg_match('/^"(?:\\\\\"|[^"])*"/A',$rest,$m)){$lit=$m[0];$node=new Node('literal',[],['expr'=>$lit]);$out[]=$node;$i+=strlen($lit);continue;}if(preg_match('/^\d+(?:\.\d+)?/A',$rest,$m)){$lit=$m[0];$node=new Node('literal',[],['expr'=>$lit]);$out[]=$node;$i+=strlen($lit);continue;}showException("ConditionParser tokenizer: token inválido em: ".substr($condition,$i,50));}return $out;}public static function evaluateNode(Node $node,$global,$local=[]){if($node->type==='literal'){if(array_key_exists('expr',$node->params)){$expr=$node->params['expr'];if($expr===null||$expr===''){return false;}$val=resolveValue($expr,$global,$local);return (bool)$val;}return (bool)($node->params['value']?? false);}else if($node->type==='comparison'){$leftRaw=$node->params['left']?? '';$rightRaw=$node->params['right']?? '';$opRaw=$node->params['op']?? '';$leftVal=resolveValue($leftRaw,$global,$local);$rightVal=resolveValue($rightRaw,$global,$local);$op=trim((string)$opRaw);if($op==='=='||$op==='=')return $leftVal==$rightVal;elseif($op==='===')return $leftVal===$rightVal;elseif($op==='!=')return $leftVal!=$rightVal;elseif($op==='!==')return $leftVal!==$rightVal;elseif($op==='>=')return $leftVal>=$rightVal;elseif($op==='<=')return $leftVal<=$rightVal;elseif($op==='>')return $leftVal>$rightVal;elseif($op==='<')return $leftVal<$rightVal;}if($node->type==='and'){return (bool)self::evaluateNode($node->params["left"],$global,$local)&&(bool)self::evaluateNode($node->params["right"],$global,$local);}else if($node->type==='or'){return (bool)self::evaluateNode($node->params["left"],$global,$local)||(bool)self::evaluateNode($node->params["right"],$global,$local);}else if($node->type==='not'){return!(bool) self::evaluateNode($node->params["expr"],$global,$local);}return false;}}class TemplateRenderer{public function render($root,array $global=[],$local=[]):string{$pieces=[];$this->renderNodeTo($root,function($chunk)use(&$pieces){$pieces[]=$chunk;},$global,$local);return implode('',$pieces);}private static function renderNodeTo(Node $node,callable $writer,array $global,$local=[]){$type=$node->type;$children=(is_array($node->content))?$node->content:[];if($type==="text"){$writer(replaceVar((string)$node->content,$global,$local));return;}if($node->type==="root"){foreach($children as $child)self::renderNodeTo($child,$writer,$global,$local);return;}else if($type==="for"){$times=($node->params["times"]?? 0);$times=resolveValue($times,$global,$local);if($times<=0)return;$staticText=self::childrenAreStaticText($children);if($staticText!==false){$single=replaceVar($staticText,$global,$local);$writer(str_repeat($single,$times));return;}for($i=0;$i<$times;$i++){$localCtx=$local;$localCtx['loop_index']=$i;foreach($children as $child)self::renderNodeTo($child,$writer,$global,$localCtx);unset($local['loop_index']);}return;}else if($node->type==="foreach"){$listName=$node->params["listname"]?? null;if($listName===null)return;$list=resolvePath($listName,$global);if(!is_iterable($list))return;$staticText=self::childrenAreStaticText($children);if($staticText!==false){$single=replaceVar($staticText,$global,$local);$times=count($list);$total=str_repeat($single,$times);$writer($total);return;}$idx=0;$localCtx=$local;foreach($list as $k=>$v){if(isset($node->params["item"])&&$node->params["item"]!==null){$localCtx[$node->params["item"]]=$v;}if(isset($node->params["key"])&&$node->params["key"]!==null){$localCtx[$node->params["key"]]=$k;}$localCtx['loop_index']=$idx;foreach($children as $child){self::renderNodeTo($child,$writer,$global,$localCtx);}if(isset($node->params["item"])&&$node->params["item"]!==null)unset($local[$node->params["item"]]);if(isset($node->params["key"])&&$node->params["key"]!==null)unset($local[$node->params["key"]]);unset($local['loop_index']);$idx++;}return;}else if($node->type==="if"||$node->type==="elseif"){$dependents=$node->dependents ??[];$condRoot=$node->params['condNode']?? null;$condVal=false;if($condRoot instanceof Node){$condVal=ConditionParser::evaluateNode($condRoot,$global,$local);}if($condVal){if(ConditionParser::evaluateNode($condRoot,$global,$local)){foreach($children as $child){self::renderNodeTo($child,$writer,$global,$local);}return;}}if(!empty($dependents)&&is_array($dependents)){foreach($dependents as $dep){if(!($dep instanceof Node))continue;if($dep->type==='elseif'){$cp=$dep->params['condNode']?? null;if(ConditionParser::evaluateNode($cp,$global,$local)){foreach($dep->content as $child){self::renderNodeTo($child,$writer,$global,$local);}break;}}elseif($dep->type==='else'){foreach($dep->content as $child){self::renderNodeTo($child,$writer,$global,$local);}break;}}}return;}else if($node->type==="str_filter"){$str=(isset($node->params["str"]))?trim((string)$node->params["str"]):'';$str=resolveValue($str,$global,$local);$filters=(isset($node->params["filters"]))?(array) $node->params["filters"]:[];foreach($filters as $f){$str=processFilter($str,$f,$global,$local);}$writer($str);return;}if($node->type==="else"){foreach($children as $child)self::renderNodeTo($child,$writer,$global,$local);return;}foreach($children as $child)self::renderNodeTo($child,$writer,$global,$local);return;}private static function childrenAreStaticText(array $children){if(count($children)===0)return '';$buf='';foreach($children as $c){if(!($c instanceof Node)||$c->type!=='text')return false;$txt=(string)$c->content;if(strpos($txt,'{')!==false)return false;$buf.=$txt;}return $buf;}public function renderTo($root,callable $writer,array $global=[],$local=[]):void{$this->renderNodeTo($root,$writer,$global,$local);}}class CacheManager{private $folderpath='';private $arraysubfolders=["templates","parsers"];public function __construct(string $folderpath=__DIR__."/"){$this->folderpath=rtrim($folderpath,"/")."/";if(is_dir($folderpath)){foreach($this->arraysubfolders as $subfolder){if(!is_dir($folderpath.$subfolder)){mkdir($folderpath.$subfolder,0755,true);}}}}public function setCache(string $filename,array|object|string $data,array|object|string $inputs,string|int $type,string $secret):bool{if((is_string($type)&&in_array($type,$this->arraysubfolders))){$type=$type;}elseif(key_exists($type,$this->arraysubfolders)){$type=$this->arraysubfolders[$type];}else{showException("Tipo de cache inexistente ou inválido");return false;}$data=serialize($data);$inputs=serialize($inputs);$hash=hash_hmac("sha256",$inputs,$secret);$cache=['hash'=>$hash,'data'=>base64_encode(gzencode($data)),'modifiedAt'=>time(),];$cache=json_encode($cache,JSON_PRETTY_PRINT|JSON_UNESCAPED_UNICODE);$dir=$this->folderpath.$type;$filenameComp=$filename.".".$type.'.cache';$filepath=$dir."/".$filenameComp;if(!is_dir($dir)){if(!mkdir($dir,0775,true)&&!is_dir($dir)){showException("Falha ao criar diretório de cache: {$dir}");}}return file_put_contents($filepath,$cache,LOCK_EX)!==false;}public function dellCache(string $filename,string|int $type,):bool{if((is_string($type)&&in_array($type,$this->arraysubfolders))){$type=$type;}elseif(key_exists($type,$this->arraysubfolders)){$type=$this->arraysubfolders[$type];}else{showException("Tipo de cache inexistente ou inválido");return false;}$dir=$this->folderpath.$type;$filenameComp=$filename.".".$type.'.cache';$filepath=$dir."/".$filenameComp;if(!is_dir($dir)){if(!mkdir($dir,0775,true)&&!is_dir($dir)){showException("Falha ao criar diretório de cache: {$dir}");}}return unlink($filepath)!==false;}public function getCache(string $filename,array|object|string $inputs,string $type,string $secret):mixed{if((is_string($type)&&in_array($type,$this->arraysubfolders))){$type=$type;}elseif(key_exists($type,$this->arraysubfolders)){$type=$this->arraysubfolders[$type];}else{showException("Tipo de cache inexistente ou inválido");return false;}$dir=$this->folderpath.$type;$filenameComp=$filename.".".$type.'.cache';$filepath=$dir."/".$filenameComp;$cache=null;if(file_exists($filepath)){$raw=file_get_contents($filepath);if($raw===false){showException("Falha ao ler o cache.");return false;}$cached=json_decode($raw,true);if(!is_array($cached)){showException("Cache inválido ou corrompido: {$filepath}");return false;}$inputs=serialize($inputs);$hash=hash_hmac("sha256",$inputs,$secret);if(hash_equals($hash,$cached["hash"])){$cache=gzdecode(base64_decode($cached["data"]));}else{$this->dellCache($filename,$type);}}return(isset($cache))?unserialize($cache):false;}}class Template{private $html;private $filename;private $secret;private $cachedir;private $canCache=true;public function __construct(string $name,string $secret,string $cachedir,string $envdir){$this->loadEnv($envdir);$this->secret=$secret;$this->cachedir=$cachedir;if(file_exists($name)){$this->html=file_get_contents($name);$this->filename=$name;}else{showException("Template: ".$name." não encontrado");}}public function render(array $data){if(!isset($this->html)){showException("Erro ao processar o html");}$cache=new CacheManager($this->cachedir);$rend=new TemplateRenderer();$parseInpt=[$this->html];$parse=$cache->getCache($this->filename,$parseInpt,"parsers",$this->secret);$templateInpt=[$this->html,$data];$template=$cache->getCache($this->filename,$templateInpt,"templates",$this->secret);if($template===false||!$this->canCache){if($parse===false||!$this->canCache){$parse=new TemplateParser($this->html,$data);$cache->setCache($this->filename,$parse,$parseInpt,"parsers",$this->secret);}$template=$rend->render($parse->root,$data);$cache->setCache($this->filename,$template,$templateInpt,"templates",$this->secret);}echo $template;}public function debug(array $data){$parse=new TemplateParser($this->html,$data);$cache=new CacheManager($this->cachedir);$parseInpt=[$this->html];$parse=$cache->getCache($this->filename,$parseInpt,"parsers",$this->secret);NodeDebugger::toHtml($parse->root,['maxDepth'=>99999,'trimText'=>99999,'showEmpty'=>false]);}private function loadEnv($dir):void{if(file_exists($dir)){$lines=file($dir,FILE_IGNORE_NEW_LINES|FILE_SKIP_EMPTY_LINES);foreach($lines as $line){if(strpos(trim($line),'#')===0)continue;[$key,$value]=explode('=',$line,2);$_ENV[trim($key)]=trim($value);}}}}